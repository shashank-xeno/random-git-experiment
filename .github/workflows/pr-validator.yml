name: Validate PR Commits

on:
  pull_request:
    branches:
      - staging  # Triggered when a PR is created against the 'main' branch

jobs:
  validate-commits:
    if: ${{ github.base_ref == 'staging' }}
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout the repository
        uses: actions/checkout@v3

      # Step 2: Fetch only the source and target branches (no need to fetch all branches)
      - name: Fetch the source, target and dev branches
        run: |
          git fetch origin ${{ github.head_ref }}  # Fetch the PR source branch
          git fetch origin ${{ github.base_ref }}  # Fetch the PR target branch
          git fetch origin dev  # Fetch the dev branch

      # Step 3: Extract the source branch name and target branch name from GitHub context
      - name: Get PR source and target branch
        run: |
          echo "PR source branch: ${{ github.head_ref }}"  # This is the branch the PR originates from
          echo "PR target branch: ${{ github.base_ref }}"  # This is the branch the PR is targeting

      # Step 4: Validate the commits in the PR source branch are already part of the target branch (main)
      - name: Validate commits from source branch
        run: |
          # Fetch the commits in this PR
          PR_COMMITS=$(git log origin/${{ github.head_ref }} ^origin/staging --oneline)

          echo "Commits in this PR compared to dev:"
          echo "$PR_COMMITS"

          # Initialize a flag to track missing commits
          MISSING_COMMITS=false

          # Check each commit in the PR to see if it's in dev and ignore merge commits
          while IFS= read -r commit; do
            COMMIT_HASH=$(echo $commit | awk '{print $1}')
            COMMIT_MESSAGE=$(echo $commit | sed 's/^[^ ]* //')

            # Skip merge commits
            if [[ "$COMMIT_MESSAGE" =~ ^Merge\ pull\ request ]]; then
              echo "Skipping merge commit: $COMMIT_HASH"
              continue
            fi

            # Check if the commit is in dev
            if ! git merge-base --is-ancestor $COMMIT_HASH origin/dev > /dev/null 2>&1; then
              echo "Commit $COMMIT_HASH is missing in 'dev'."
              MISSING_COMMITS=true
            else
              echo "Commit $COMMIT_HASH is present in 'dev'."
            fi
          done <<< "$PR_COMMITS"

          # If any commit is missing, fail the workflow
          if [ "$MISSING_COMMITS" = true ]; then
            echo "Some commits in this PR are not present in 'dev'."
            exit 1
          else
            echo "All commits in this PR are present in 'dev'."
          fi
